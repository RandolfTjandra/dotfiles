[user]
  name = Randolf Tjandra
  email = randolftjandra@gmail.com

[pull]
  rebase = true

[alias]
  gl = log --graph --oneline --decorate --branches --tags --remotes   
  br = branch -v
  brr = branch -vr
  co = checkout
  ci = commit
  di = diff
  dic= diff --cached
  st = status -sb
  # Show the commits and content in this branch
  showbr = log --pretty=oneline trunk..
  showallbr = log -U trunk ..

  hist = log --pretty=format:\"%h %ad | %s%d [%an]\" --graph --date=short
  type = cat-file -t
  dump = cat-file -p

  lg1 = log --graph --abbrev-commit --decorate --date=relative --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all
  lg2 = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n''          %C(white)%s%C(reset) %C(dim white)- %an%C(reset)' --all
  lg = !(git lg1)

  # Copies commit has into pb from git log
  gh = "!git log --oneline | gum filter | cut -d' ' -f1 | pbcopy"

  # Formats recent changes for jira
  jira-log = "!f() { A=$1; B=${2-origin/master}; git fetch origin; git log $A..$B --pretty=format:'%H%n%B%x0C' | tr -d \"\\r\" | perl -e '$/ = \"\\f\"; print \"||SHA||Summary||Issue ID||\\n\"; while(<>) { /\\s*(\\w+)\\s+([^\\n]+).*jira: ([^\\n]+)/si; print \"| $1 | $2 | $3 |\\n\"};';}; f"

  # create new qa branch form current branch
  coqa = "!f() { git checkout -b $(git rev-parse --abbrev-ref HEAD)-qa; }; f"

  # Commits staged changes and force pushes them to origin
  foobar = "!f() { git commit --amend --no-edit; git push origin HEAD --force; };f"

  #test = "!f() { if false;then echo true;else echo false;fi; }; f"
  test= "!f() { git switch $(git rev-parse --abbrev-ref HEAD)-qa 2>/dev/null || git switch -c $(git rev-parse --abbrev-ref HEAD)-qa; }; f"
  #if [[]];then ;else;fi

[log]
  date = relative

[core]
  whitespace=fix,-indent-with-non-tab,trailing-space,cr-at-eol
  excludesfile = ~/.gitignore

[difftool "sourcetree"]
  cmd = opendiff \"$LOCAL\" \"$REMOTE\"
  path = 

[mergetool "sourcetree"]
  cmd = /Applications/SourceTree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
  trustExitCode = true

[log]
  date = relative

[core]
  pager = less -FRSX
  whitespace=fix,-indent-with-non-tab,trailing-space,cr-at-eol
  excludesfile = ~/.gitignore
  hooksPath = ~/.git-hooks

[url "ssh://git@github.com/"]
  insteadOf = https://github.com/

[commit]
  template = ~/.gitmessage

[init]
  templatedir = ~/.git-templates

[core]
  excludesfile = ~/.gitignore

[url "git@github.com:"]
  insteadOf = https://github.com/

[alias]
  gl = log --graph --oneline --decorate --branches --tags --remotes   
  co = checkout
  ci = commit
  st = status -sb
  br = branch -v
  hist = log --pretty=format:\"%h %ad | %s%d [%an]\" --graph --date=short
  type = cat-file -t
  dump = cat-file -p

  lg1 = log --graph --abbrev-commit --decorate --date=relative --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all
  lg2 = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n''          %C(white)%s%C(reset) %C(dim white)- %an%C(reset)' --all
  lg = !(git lg1)

  gh = "!git log --oneline | gum filter | cut -d' ' -f1 | pbcopy"

  # create new qa branch form current branch
  coqa = "!f() { git checkout -b $(git rev-parse --abbrev-ref HEAD)-qa; }; f"

  foobar = "!f() { git commit --amend; git push origin HEAD --force; };f"

  test= "!f() { git switch $(git rev-parse --abbrev-ref HEAD)-qa 2>/dev/null || git switch -c $(git rev-parse --abbrev-ref HEAD)-qa; }; f"

[difftool "sourcetree"]
  cmd = opendiff \"$LOCAL\" \"$REMOTE\"
  path = 
[mergetool "sourcetree"]
  cmd = /Applications/SourceTree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
  trustExitCode = true

[log]
  date = relative

 ; You can set the color to any of the following values: normal, black,
 ; red, green, yellow, blue, magenta, cyan, or white. If you want an
 ; attribute like bold in the previous example, you can choose from bold,
 ; dim, ul (underline), blink, and reverse (swap foreground and background).
[color]
  ui = true
  pager = true
  log = true

[color "interactive"]
  prompt = blue bold
  error = red bold
  header = cyan bold
  help = green
  comment = magenta dim

[color "diff"]
  plain = white
  meta = yellow bold
  frag = magenta bold
  old = red bold
  new = green bold
  whitespace = red blink

[color "status"]
  added = yellow
  changed = green
  untracked = cyan

[color "branch"]
  current = yellow reverse
  local = yellow
  remote = green

[core]
  pager = less -FRSX
  whitespace=fix,-indent-with-non-tab,trailing-space,cr-at-eol
  excludesfile = ~/.gitignore

[url "ssh://git@github.com/"]
  insteadOf = https://github.com/

[url "git@github.com:"]
  insteadOf = https://github.com/
